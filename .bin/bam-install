#!/usr/bin/env node

const program  = require('commander');
const shell    = require('shelljs');
const crypto   = require('crypto');
const prompt = require('prompt');
const download = require('download-git-repo');
const fs       = require('fs-extra');

program
.option('-b, --build', 'Run {npm|yarn} install and build')
.option('-f, --fresh', 'Will delete any existing files and totally overwrite folders')
.parse(process.argv);

let copy = {
   files: [
      '/postcss.config.js',
      '/.sass-lint.yml',
      '/.editorconfig',
      '/robots.txt',
      '/.babelrc'
   ]
}

console.log('\n**********************************************');
console.log('Welcome to Bamburgs...let\'s get you all set up ok!' );
console.log('We need to build up your package.json file so we\'re');
console.log('to ask you some questions.')
console.log('**********************************************\n');

prompt.message = '';
prompt.delimiter = ': ';

prompt.start();

let schema = {
   properties: {
      name: {
         pattern: /^[a-zA-Z0-9\-]+$/,
         message: 'Name must be only letters, numbers, or dashes',
         description: "What's your projects name?",
         required: true
      },
      description: {
         type: 'string',
         description: "Give us the tweet-size description of your project"
      },
      author: {
         type: 'string',
         description: "What's your name?"
      },
      email: {
         type: 'string',
         description: "What's your email?"
      },
      dist: {
         description: "Where's your output folder?",
         default: 'dist/assets',
         type: 'string'
      },
      src: {
         description: "Where will your source files live?",
         default: 'src',
         type: 'string'
      },
      compiler: {
         type: 'string',
         description: "(Y)arn or (N)PM?",
         pattern: /(Y|y)[arn]*|(n|N)[pm]?/,
         default: 'n',
      }
   }
};

prompt.get(schema, (err, results) => {
   let hash = crypto.createHash('md5').update(results.name).digest('hex');
   let location = `${process.cwd()}/${hash}`;

   download('joecianflone/bamburgs', location, (err) => {
      if (err) {
         console.log(err);
         process.exit(0);
      }

      let package = `${location}/package.template`;
      let gitignore = `${location}/gitignore.template`;

      fs.readFile(package,'utf8', (err, data) => {
         let updatedFile = data.replace('{{name}}', results.name)
                               .replace('{{author}}', results.author)
                               .replace('{{description}}', results.description)
                               .replace('{{dist}}', results.dist)
                               .replace('{{src}}', results.src)
                               .replace('{{email}}', results.email);

         fs.writeFile(`${process.cwd()}/package.json`, updatedFile, 'utf8', (err) => err ? console.log(err) : 'Done');
      });

      fs.readFile(gitignore, 'utf8', (err, data) => {
         let updatedFile = data.replace('{{dist}}', results.dist);

         fs.writeFile(`${process.cwd()}/.gitignore`, updatedFile, 'utf8', (err) => err ? console.log(err) : 'Done');
      });

      copy.files.forEach((file) => {
         fs.copy(`${location}${file}`, `${process.cwd()}${file}`)
           .then((result) => console.log(`Copying: ${file}`))
           .catch((err) => console.log(`Unable to copy: ${file}`));
      });

      fs.copy(`${location}/src`, `${process.cwd()}/${results.src}`)
        .then(() => {
           console.log(`Copying src files and folders to ${results.src}`);
           fs.remove(location);
        })
       .then(() => {
           if (program.build) {
              console.log("Installing Dependencies, this takes a bit...\n\n");
              let builder = results.compiler.toLowerCase() === 'y' ? 'yarn' : 'npm';

              shell.exec(`${builder} install`);
              console.log('Building...\n');
              shell.exec(`${builder} run build`);
              console.log('Build Complete\n');
           }
        })
        .catch(err => console.log(`Unable to copy ${location}/src to ${process.cwd()}/${results.src}`));
   });
});
