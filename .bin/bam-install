#!/usr/bin/env node

const program  = require('commander');
const crypto   = require('crypto');
const prompt = require('prompt');
const download = require('download-git-repo');
const fs       = require('fs-extra');
const Builder  = require('../src/Builder.js');

program
   .option('-b, --build', 'Run {npm|yarn} install and build')
   .option('-f, --fresh', 'Will delete any existing files and totally overwrite folders')
   .parse(process.argv);

let copy = {
   rootFiles: [
      'postcss.config.js',
      '/.sass-lint.yml',
      '/.editorconfig',
      '/.babelrc'
   ],
   publicFiles: [
      '/robots.txt',
   ]
}

console.log('\n**********************************************');
console.log('Welcome to Bamburgs...let\'s get you all set up ok!' );
console.log('We need to build up your package.json file so we\'re');
console.log('to ask you some questions.')
console.log('**********************************************\n');

prompt.message = '';
prompt.delimiter = ': ';

prompt.start();

let schema = {
   properties: {
      name: {
         pattern: /^[a-zA-Z0-9\-]+$/,
         message: 'Name must be only letters (lowercase), numbers, or dashes',
         description: "What's your projects name?",
         required: true
      },
      description: {
         type: 'string',
         description: "Give us the tweet-size description of your project"
      },
      author: {
         type: 'string',
         description: "What's your name?"
      },
      email: {
         type: 'string',
         description: "What's your email?"
      },
      dist: {
         description: "Where's your output folder?",
         default: 'dist/assets',
         type: 'string'
      },
      src: {
         description: "Where will your source files live?",
         default: 'src',
         type: 'string'
      },
      compiler: {
         type: 'string',
         description: "(Y)arn or (N)PM?",
         pattern: /(Y|y)[arn]*|(n|N)[pm]?/,
         default: 'n',
      },
      js: {
         type: 'string',
         description: 'JS Framework: (V)ue, (J)Query or (N)one?',
         pattern: /(V|v)[ue]*|(R|r)[eact]*|(J|j)[query]*|(N|n)[one]*?/,
         default: 'v',
      }
   }
};


prompt.get(schema, (err, results) => {
   let build = new Builder(results);
   build.setLocation(process.cwd())
        .setHash(crypto.createHash('md5').update(results.name).digest('hex'))
        .setFiles({
           root: [
              'postcss.config.js',
              '.sass-lint.yml',
              '.editorconfig',
              '.babelrc'
           ],
           dist: [
              'robots.txt',
           ],
        })
        .setTemplates({
           package: 'package.json',
           gitignore: '.gitignore',
           html: 'template.html'
        });

   if (program.fresh) {
      build.removeFiles(fs);
   }

   download('joecianflone/bamburgs', build.getDownloadPath(), (err) => {
      if (err) {
         console.log(err);
         process.exit(0);
      }

      build.generateFilesFromTemplates(fs);

      build.copyFiles(fs);

      build.copySrcFile(fs)
            .then(() => {
               build.removeHashFolder(fs);
            })
            .then(() => {
               if (program.build) {
                  build.compileAssetsFirstTime(fs);
               }
            })
            .then(() => {
               console.log('Bamburgs is ready to go\n');
            })
            .catch(err => console.log('Unable to copy SRC files to new location'));
   });
});
